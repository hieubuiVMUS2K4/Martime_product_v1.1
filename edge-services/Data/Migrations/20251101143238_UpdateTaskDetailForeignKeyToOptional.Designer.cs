// <auto-generated />
using System;
using MaritimeEdge.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaritimeEdge.Data.Migrations
{
    [DbContext(typeof(EdgeDbContext))]
    [Migration("20251101143238_UpdateTaskDetailForeignKeyToOptional")]
    partial class UpdateTaskDetailForeignKeyToOptional
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaritimeEdge.Models.AisData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CallSign")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("call_sign");

                    b.Property<double?>("CourseOverGround")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("course_over_ground");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Destination")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("destination");

                    b.Property<int?>("DimensionBow")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_bow");

                    b.Property<int?>("DimensionPort")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_port");

                    b.Property<int?>("DimensionStarboard")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_starboard");

                    b.Property<int?>("DimensionStern")
                        .HasColumnType("integer")
                        .HasColumnName("dimension_stern");

                    b.Property<double?>("Draught")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("draught");

                    b.Property<int?>("EtaDay")
                        .HasColumnType("integer")
                        .HasColumnName("eta_day");

                    b.Property<int?>("EtaHour")
                        .HasColumnType("integer")
                        .HasColumnName("eta_hour");

                    b.Property<int?>("EtaMinute")
                        .HasColumnType("integer")
                        .HasColumnName("eta_minute");

                    b.Property<int?>("EtaMonth")
                        .HasColumnType("integer")
                        .HasColumnName("eta_month");

                    b.Property<string>("ImoNumber")
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("imo_number");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("Latitude")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("longitude");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer")
                        .HasColumnName("message_type");

                    b.Property<string>("Mmsi")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("mmsi");

                    b.Property<int?>("NavigationStatus")
                        .HasColumnType("integer")
                        .HasColumnName("navigation_status");

                    b.Property<bool?>("PositionAccuracy")
                        .HasColumnType("boolean")
                        .HasColumnName("position_accuracy");

                    b.Property<double?>("RateOfTurn")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("rate_of_turn");

                    b.Property<string>("ShipName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("ship_name");

                    b.Property<int?>("ShipType")
                        .HasColumnType("integer")
                        .HasColumnName("ship_type");

                    b.Property<double?>("SpeedOverGround")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("speed_over_ground");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<int?>("TrueHeading")
                        .HasColumnType("integer")
                        .HasColumnName("true_heading");

                    b.HasKey("Id")
                        .HasName("p_k_ais_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_ais_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("MessageType")
                        .HasDatabaseName("idx_ais_message_type");

                    b.HasIndex("Mmsi", "Timestamp")
                        .HasDatabaseName("idx_ais_mmsi_timestamp");

                    b.ToTable("ais_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.CargoOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BillOfLading")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bill_of_lading");

                    b.Property<string>("CargoDescription")
                        .HasColumnType("text")
                        .HasColumnName("cargo_description");

                    b.Property<string>("CargoType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cargo_type");

                    b.Property<string>("Consignee")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("consignee");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DischargePort")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("discharge_port");

                    b.Property<DateTime?>("DischargedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("discharged_at");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<DateTime?>("LoadedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("loaded_at");

                    b.Property<string>("LoadingPort")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("loading_port");

                    b.Property<string>("OperationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("operation_id");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("operation_type");

                    b.Property<double>("Quantity")
                        .HasColumnType("decimal(15,3)")
                        .HasColumnName("quantity");

                    b.Property<string>("SealNumbers")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("seal_numbers");

                    b.Property<string>("Shipper")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shipper");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("text")
                        .HasColumnName("special_requirements");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<long?>("VoyageId")
                        .HasColumnType("bigint")
                        .HasColumnName("voyage_id");

                    b.HasKey("Id")
                        .HasName("p_k_cargo_operations");

                    b.HasIndex("BillOfLading")
                        .HasDatabaseName("idx_cargo_bol");

                    b.HasIndex("CargoType")
                        .HasDatabaseName("idx_cargo_type");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_cargo_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("OperationId")
                        .IsUnique()
                        .HasDatabaseName("idx_cargo_operation_id_unique");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_cargo_status");

                    b.HasIndex("VoyageId")
                        .HasDatabaseName("idx_cargo_voyage");

                    b.ToTable("cargo_operations", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.CrewMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CertificateExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("certificate_expiry");

                    b.Property<DateTime?>("CertificateIssue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("certificate_issue");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("certificate_number");

                    b.Property<DateTime?>("ContractEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("contract_end");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CrewId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crew_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("department");

                    b.Property<DateTime?>("DisembarkDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("disembark_date");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email_address");

                    b.Property<DateTime?>("EmbarkDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("embark_date");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("emergency_contact");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("full_name");

                    b.Property<bool>("IsOnboard")
                        .HasColumnType("boolean")
                        .HasColumnName("is_onboard");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("join_date");

                    b.Property<DateTime?>("MedicalExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("medical_expiry");

                    b.Property<DateTime?>("MedicalIssue")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("medical_issue");

                    b.Property<string>("Nationality")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nationality");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("PassportExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("passport_expiry");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("passport_number");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("position");

                    b.Property<string>("Rank")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rank");

                    b.Property<string>("SeamanBookNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("seaman_book_number");

                    b.Property<DateTime?>("VisaExpiry")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visa_expiry");

                    b.Property<string>("VisaNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("visa_number");

                    b.HasKey("Id")
                        .HasName("p_k_crew_members");

                    b.HasIndex("CertificateExpiry")
                        .HasDatabaseName("idx_crew_cert_expiry");

                    b.HasIndex("CrewId")
                        .IsUnique()
                        .HasDatabaseName("idx_crew_id_unique");

                    b.HasIndex("IsOnboard")
                        .HasDatabaseName("idx_crew_onboard")
                        .HasFilter("is_onboard = true");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_crew_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Position")
                        .HasDatabaseName("idx_crew_position");

                    b.ToTable("crew_members", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.EngineData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AlarmStatus")
                        .HasColumnType("integer")
                        .HasColumnName("alarm_status");

                    b.Property<double?>("CoolantTemp")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("coolant_temp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EngineId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("engine_id");

                    b.Property<double?>("ExhaustTemp")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("exhaust_temp");

                    b.Property<double?>("FuelPressure")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("fuel_pressure");

                    b.Property<double?>("FuelRate")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("fuel_rate");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("LoadPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("load_percent");

                    b.Property<double?>("LubeOilPressure")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("lube_oil_pressure");

                    b.Property<double?>("LubeOilTemp")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("lube_oil_temp");

                    b.Property<double?>("Rpm")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("rpm");

                    b.Property<double?>("RunningHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("running_hours");

                    b.Property<int?>("StartCount")
                        .HasColumnType("integer")
                        .HasColumnName("start_count");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_engine_data");

                    b.HasIndex("AlarmStatus")
                        .HasDatabaseName("idx_engine_alarm_status")
                        .HasFilter("alarm_status > 0");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_engine_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("EngineId", "Timestamp")
                        .HasDatabaseName("idx_engine_id_timestamp");

                    b.ToTable("engine_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.EnvironmentalData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AirTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("air_temperature");

                    b.Property<double?>("BarometricPressure")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("barometric_pressure");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("Humidity")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("humidity");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("SeaTemperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("sea_temperature");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double?>("Visibility")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("visibility");

                    b.Property<double?>("WaveHeight")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wave_height");

                    b.Property<double?>("WindDirection")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_direction");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_speed");

                    b.HasKey("Id")
                        .HasName("p_k_environmental_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_environmental_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_environmental_timestamp");

                    b.ToTable("environmental_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.FuelAnalyticsSummary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("AuxiliaryFuelMT")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("auxiliary_fuel_m_t");

                    b.Property<double>("AverageSpeedKnots")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("average_speed_knots");

                    b.Property<double?>("AvgMainEngineLoad")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("avg_main_engine_load");

                    b.Property<double?>("AvgMainEngineRPM")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("avg_main_engine_r_p_m");

                    b.Property<double?>("AvgSeaState")
                        .HasColumnType("decimal(3,1)")
                        .HasColumnName("avg_sea_state");

                    b.Property<double?>("AvgWindSpeed")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("avg_wind_speed");

                    b.Property<double>("BoilerFuelMT")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("boiler_fuel_m_t");

                    b.Property<double?>("CII")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("c_i_i");

                    b.Property<string>("CIIRating")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("c_i_i_rating");

                    b.Property<double>("CO2EmissionsMT")
                        .HasColumnType("decimal(12,3)")
                        .HasColumnName("c_o2_emissions_m_t");

                    b.Property<double?>("CargoWeightMT")
                        .HasColumnType("decimal(12,3)")
                        .HasColumnName("cargo_weight_m_t");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DataPointsCount")
                        .HasColumnType("integer")
                        .HasColumnName("data_points_count");

                    b.Property<double>("DataQualityScore")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("data_quality_score");

                    b.Property<double>("DistanceNauticalMiles")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("distance_nautical_miles");

                    b.Property<double?>("EEOI")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("e_e_o_i");

                    b.Property<double?>("EstimatedFuelCostUSD")
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("estimated_fuel_cost_u_s_d");

                    b.Property<double>("FuelPerHour")
                        .HasColumnType("decimal(8,4)")
                        .HasColumnName("fuel_per_hour");

                    b.Property<double>("FuelPerNauticalMile")
                        .HasColumnType("decimal(8,4)")
                        .HasColumnName("fuel_per_nautical_mile");

                    b.Property<double?>("FuelPricePerMT")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("fuel_price_per_m_t");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double>("MainEngineFuelMT")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("main_engine_fuel_m_t");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_end");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("period_start");

                    b.Property<string>("PeriodType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("period_type");

                    b.Property<double?>("SFOC")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("s_f_o_c");

                    b.Property<double>("TimeBerthHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("time_berth_hours");

                    b.Property<double>("TimeUnderwayHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("time_underway_hours");

                    b.Property<double>("TotalFuelConsumedMT")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("total_fuel_consumed_m_t");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VoyageId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voyage_id");

                    b.HasKey("Id")
                        .HasName("p_k_fuel_analytics_summaries");

                    b.HasIndex("CIIRating")
                        .HasDatabaseName("idx_fuel_analytics_cii");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_fuel_analytics_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("VoyageId")
                        .HasDatabaseName("idx_fuel_analytics_voyage");

                    b.HasIndex("PeriodType", "PeriodStart")
                        .IsDescending(false, true)
                        .HasDatabaseName("idx_fuel_analytics_period");

                    b.ToTable("fuel_analytics_summaries", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.FuelConsumption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CargoWeight")
                        .HasColumnType("decimal(12,3)")
                        .HasColumnName("cargo_weight");

                    b.Property<double?>("Co2Emissions")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("co2_emissions");

                    b.Property<double>("ConsumedMass")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("consumed_mass");

                    b.Property<double>("ConsumedVolume")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("consumed_volume");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("Density")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("density");

                    b.Property<double?>("DistanceTraveled")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("distance_traveled");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("fuel_type");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("TankId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tank_id");

                    b.Property<double?>("TimeUnderway")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("time_underway");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_fuel_consumption");

                    b.HasIndex("FuelType")
                        .HasDatabaseName("idx_fuel_type");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_fuel_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_fuel_timestamp");

                    b.ToTable("fuel_consumption", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.FuelEfficiencyAlert", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acknowledged_at");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("acknowledged_by");

                    b.Property<string>("AlertType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alert_type");

                    b.Property<double>("CurrentValue")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("current_value");

                    b.Property<double>("DeviationPercent")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("deviation_percent");

                    b.Property<double>("ExpectedValue")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("expected_value");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_acknowledged");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_resolved");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("message");

                    b.Property<string>("RecommendedAction")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("recommended_action");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("severity");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_fuel_efficiency_alerts");

                    b.HasIndex("AlertType")
                        .HasDatabaseName("idx_fuel_alert_type");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_fuel_alert_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_fuel_alert_timestamp");

                    b.HasIndex("IsResolved", "Severity")
                        .HasDatabaseName("idx_fuel_alert_unresolved")
                        .HasFilter("is_resolved = false");

                    b.ToTable("fuel_efficiency_alerts", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.GeneratorData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("ActivePower")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("active_power");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("Current")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("current");

                    b.Property<double?>("Frequency")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("frequency");

                    b.Property<string>("GeneratorId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("generator_id");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("boolean")
                        .HasColumnName("is_running");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("LoadPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("load_percent");

                    b.Property<double?>("PowerFactor")
                        .HasColumnType("decimal(4,3)")
                        .HasColumnName("power_factor");

                    b.Property<double?>("RunningHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("running_hours");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double?>("Voltage")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("voltage");

                    b.HasKey("Id")
                        .HasName("p_k_generator_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_generator_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("GeneratorId", "Timestamp")
                        .HasDatabaseName("idx_generator_id_timestamp");

                    b.ToTable("generator_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaintenanceTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignedTo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assigned_to");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("completed_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("EquipmentId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("equipment_id");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("equipment_name");

                    b.Property<int?>("IntervalDays")
                        .HasColumnType("integer")
                        .HasColumnName("interval_days");

                    b.Property<double?>("IntervalHours")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("interval_hours");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<DateTime?>("LastDoneAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_done_at");

                    b.Property<DateTime>("NextDueAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_due_at");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("priority");

                    b.Property<double?>("RunningHoursAtLastDone")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("running_hours_at_last_done");

                    b.Property<string>("SparePartsUsed")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("spare_parts_used");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_description");

                    b.Property<string>("TaskId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_id");

                    b.Property<string>("TaskType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("task_type");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("task_type_id");

                    b.HasKey("Id")
                        .HasName("p_k_maintenance_tasks");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("idx_maintenance_equipment");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_maintenance_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("NextDueAt")
                        .HasDatabaseName("idx_maintenance_next_due");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_maintenance_status");

                    b.HasIndex("TaskId")
                        .IsUnique()
                        .HasDatabaseName("idx_maintenance_task_id_unique");

                    b.HasIndex("TaskTypeId")
                        .HasDatabaseName("idx_maintenance_task_type_id");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("idx_maintenance_status_priority")
                        .HasFilter("status IN ('PENDING', 'OVERDUE', 'IN_PROGRESS')");

                    b.ToTable("maintenance_tasks", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaintenanceTaskDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool?>("CheckResult")
                        .HasColumnType("boolean")
                        .HasColumnName("check_result");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("CompletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("completed_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<long>("MaintenanceTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("maintenance_task_id");

                    b.Property<double?>("MeasuredValue")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("measured_value");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("photo_url");

                    b.Property<string>("SignatureUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("signature_url");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<long>("TaskDetailId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_detail_id");

                    b.HasKey("Id")
                        .HasName("p_k_maintenance_task_details");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("idx_mtd_completed")
                        .HasFilter("is_completed = false");

                    b.HasIndex("MaintenanceTaskId")
                        .HasDatabaseName("idx_mtd_maintenance_task_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("idx_mtd_status");

                    b.HasIndex("TaskDetailId")
                        .HasDatabaseName("idx_mtd_task_detail_id");

                    b.HasIndex("MaintenanceTaskId", "TaskDetailId")
                        .IsUnique()
                        .HasDatabaseName("idx_mtd_task_detail_unique");

                    b.ToTable("maintenance_task_details", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaterialCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CategoryCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_category_id");

                    b.HasKey("Id")
                        .HasName("p_k_material_categories");

                    b.HasIndex("CategoryCode")
                        .IsUnique()
                        .HasDatabaseName("idx_material_category_code_unique");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_material_category_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_material_category_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("idx_material_category_parent");

                    b.ToTable("material_categories", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaterialItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("barcode");

                    b.Property<bool>("BatchTracked")
                        .HasColumnType("boolean")
                        .HasColumnName("batch_tracked");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<bool>("ExpiryRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("expiry_required");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("item_code");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("manufacturer");

                    b.Property<double?>("MaxStock")
                        .HasColumnType("decimal(14,3)")
                        .HasColumnName("max_stock");

                    b.Property<double?>("MinStock")
                        .HasColumnType("decimal(14,3)")
                        .HasColumnName("min_stock");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<double>("OnHandQuantity")
                        .HasColumnType("decimal(14,3)")
                        .HasColumnName("on_hand_quantity");

                    b.Property<string>("PartNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("part_number");

                    b.Property<double?>("ReorderLevel")
                        .HasColumnType("decimal(14,3)")
                        .HasColumnName("reorder_level");

                    b.Property<double?>("ReorderQuantity")
                        .HasColumnType("decimal(14,3)")
                        .HasColumnName("reorder_quantity");

                    b.Property<bool>("SerialTracked")
                        .HasColumnType("boolean")
                        .HasColumnName("serial_tracked");

                    b.Property<string>("Specification")
                        .HasColumnType("text")
                        .HasColumnName("specification");

                    b.Property<string>("Supplier")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.Property<decimal?>("UnitCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_cost");

                    b.HasKey("Id")
                        .HasName("p_k_material_items");

                    b.HasIndex("Barcode")
                        .HasDatabaseName("idx_material_item_barcode");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("idx_material_item_category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_material_item_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_material_item_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("ItemCode")
                        .IsUnique()
                        .HasDatabaseName("idx_material_item_code_unique");

                    b.ToTable("material_items", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.NavigationData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("Depth")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("depth");

                    b.Property<double?>("HeadingMagnetic")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("heading_magnetic");

                    b.Property<double?>("HeadingTrue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("heading_true");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("Pitch")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("pitch");

                    b.Property<double?>("RateOfTurn")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("rate_of_turn");

                    b.Property<double?>("Roll")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("roll");

                    b.Property<double?>("SpeedThroughWater")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("speed_through_water");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double?>("WindDirectionRelative")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_direction_relative");

                    b.Property<double?>("WindDirectionTrue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_direction_true");

                    b.Property<double?>("WindSpeedRelative")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_speed_relative");

                    b.Property<double?>("WindSpeedTrue")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("wind_speed_true");

                    b.HasKey("Id")
                        .HasName("p_k_navigation_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_navigation_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_navigation_timestamp");

                    b.ToTable("navigation_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.NmeaRawData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("ChecksumValid")
                        .HasColumnType("boolean")
                        .HasColumnName("checksum_valid");

                    b.Property<string>("DeviceSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("device_source");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("RawSentence")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("raw_sentence");

                    b.Property<string>("SentenceType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("sentence_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_nmea_raw_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_nmea_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("SentenceType")
                        .HasDatabaseName("idx_nmea_sentence_type");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_nmea_timestamp");

                    b.ToTable("nmea_raw_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.OilRecordBook", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("entry_date");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double?>("LocationLat")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("location_lat");

                    b.Property<double?>("LocationLon")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("location_lon");

                    b.Property<string>("MasterSignature")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("master_signature");

                    b.Property<string>("OfficerInCharge")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("officer_in_charge");

                    b.Property<string>("OperationCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("operation_code");

                    b.Property<string>("OperationDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("operation_description");

                    b.Property<double?>("Quantity")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("quantity");

                    b.Property<string>("QuantityUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("quantity_unit");

                    b.Property<string>("Remarks")
                        .HasColumnType("text")
                        .HasColumnName("remarks");

                    b.Property<string>("TankFrom")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tank_from");

                    b.Property<string>("TankTo")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tank_to");

                    b.HasKey("Id")
                        .HasName("p_k_oil_record_books");

                    b.HasIndex("EntryDate")
                        .IsDescending()
                        .HasDatabaseName("idx_orb_entry_date");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_orb_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("OfficerInCharge")
                        .HasDatabaseName("idx_orb_officer");

                    b.HasIndex("OperationCode")
                        .HasDatabaseName("idx_orb_operation_code");

                    b.ToTable("oil_record_books", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.PositionData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("Altitude")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("altitude")
                        .HasComment("Altitude in meters above MSL");

                    b.Property<double?>("CourseOverGround")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("course_over_ground")
                        .HasComment("Course in degrees true");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("FixQuality")
                        .HasColumnType("integer")
                        .HasColumnName("fix_quality");

                    b.Property<double?>("Hdop")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("hdop");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double>("Latitude")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("latitude")
                        .HasComment("Latitude in decimal degrees (-90 to +90)");

                    b.Property<double>("Longitude")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("longitude")
                        .HasComment("Longitude in decimal degrees (-180 to +180)");

                    b.Property<double?>("MagneticVariation")
                        .HasColumnType("double precision")
                        .HasColumnName("magnetic_variation");

                    b.Property<int>("SatellitesUsed")
                        .HasColumnType("integer")
                        .HasColumnName("satellites_used");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("source");

                    b.Property<double?>("SpeedOverGround")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("speed_over_ground")
                        .HasComment("Speed in knots");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_position_data");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_position_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_position_timestamp");

                    b.HasIndex("Timestamp", "IsSynced")
                        .HasDatabaseName("idx_position_timestamp_synced");

                    b.ToTable("position_data", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_code");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("p_k_roles");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_role_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("RoleCode")
                        .IsUnique()
                        .HasDatabaseName("idx_role_code_unique");

                    b.ToTable("roles", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.SafetyAlarm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("acknowledged_at");

                    b.Property<string>("AcknowledgedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("acknowledged_by");

                    b.Property<string>("AlarmCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alarm_code");

                    b.Property<string>("AlarmType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alarm_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAcknowledged")
                        .HasColumnType("boolean")
                        .HasColumnName("is_acknowledged");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_resolved");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("resolved_at");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("severity");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("p_k_safety_alarms");

                    b.HasIndex("AlarmType")
                        .HasDatabaseName("idx_alarm_type");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_alarm_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("Timestamp")
                        .IsDescending()
                        .HasDatabaseName("idx_alarm_timestamp");

                    b.HasIndex("IsResolved", "Severity")
                        .HasDatabaseName("idx_alarm_unresolved_severity")
                        .HasFilter("is_resolved = false");

                    b.ToTable("safety_alarms", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.SyncQueue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("LastError")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("last_error");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("integer")
                        .HasColumnName("max_retries");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_retry_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payload");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<long>("RecordId")
                        .HasColumnType("bigint")
                        .HasColumnName("record_id");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("synced_at");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("table_name");

                    b.HasKey("Id")
                        .HasName("p_k_sync_queue");

                    b.HasIndex("SyncedAt")
                        .HasDatabaseName("idx_sync_synced_at");

                    b.HasIndex("TableName")
                        .HasDatabaseName("idx_sync_table");

                    b.HasIndex("Priority", "NextRetryAt")
                        .HasDatabaseName("idx_sync_priority_retry")
                        .HasFilter("synced_at IS NULL");

                    b.HasIndex("TableName", "RecordId")
                        .HasDatabaseName("idx_sync_table_record");

                    b.ToTable("sync_queue", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.TankLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<double>("LevelPercent")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("level_percent");

                    b.Property<string>("TankId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tank_id");

                    b.Property<string>("TankType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("tank_type");

                    b.Property<double?>("Temperature")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("temperature");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<double?>("VolumeLiters")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("volume_liters");

                    b.HasKey("Id")
                        .HasName("p_k_tank_levels");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_tank_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("TankType")
                        .HasDatabaseName("idx_tank_type");

                    b.HasIndex("TankId", "Timestamp")
                        .HasDatabaseName("idx_tank_id_timestamp");

                    b.ToTable("tank_levels", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.TaskDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DetailName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("detail_name");

                    b.Property<string>("DetailType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("detail_type");

                    b.Property<string>("Instructions")
                        .HasColumnType("text")
                        .HasColumnName("instructions");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mandatory");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("max_value");

                    b.Property<double?>("MinValue")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("min_value");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer")
                        .HasColumnName("order_index");

                    b.Property<bool>("RequiresPhoto")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_photo");

                    b.Property<bool>("RequiresSignature")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_signature");

                    b.Property<int?>("TaskTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("task_type_id");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("p_k_task_details");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_task_detail_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("TaskTypeId")
                        .HasDatabaseName("idx_task_detail_type_id");

                    b.HasIndex("TaskTypeId", "OrderIndex")
                        .HasDatabaseName("idx_task_detail_type_order");

                    b.ToTable("task_details", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DefaultPriority")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("default_priority");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("EstimatedDurationHours")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_duration_hours");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("RequiredCertification")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("required_certification");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_approval");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("type_code");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("p_k_task_types");

                    b.HasIndex("Category")
                        .HasDatabaseName("idx_task_type_category");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_task_type_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("TypeCode")
                        .IsUnique()
                        .HasDatabaseName("idx_task_type_code_unique");

                    b.ToTable("task_types", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CrewId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("crew_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("p_k_users");

                    b.HasIndex("CrewId")
                        .HasDatabaseName("idx_user_crew_id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("idx_user_active")
                        .HasFilter("is_active = true");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("idx_user_role_id");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("idx_user_username_unique");

                    b.ToTable("users", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.VoyageRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ArrivalPort")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("arrival_port");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("arrival_time");

                    b.Property<double?>("AverageSpeed")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("average_speed");

                    b.Property<string>("CargoType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cargo_type");

                    b.Property<double?>("CargoWeight")
                        .HasColumnType("decimal(12,3)")
                        .HasColumnName("cargo_weight");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DeparturePort")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("departure_port");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("departure_time");

                    b.Property<double?>("DistanceTraveled")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("distance_traveled");

                    b.Property<double?>("FuelConsumed")
                        .HasColumnType("decimal(10,3)")
                        .HasColumnName("fuel_consumed");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("VoyageNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voyage_number");

                    b.Property<string>("VoyageStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("voyage_status");

                    b.HasKey("Id")
                        .HasName("p_k_voyage_records");

                    b.HasIndex("DepartureTime")
                        .IsDescending()
                        .HasDatabaseName("idx_voyage_departure");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_voyage_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("VoyageNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_voyage_number_unique");

                    b.HasIndex("VoyageStatus")
                        .HasDatabaseName("idx_voyage_status");

                    b.ToTable("voyage_records", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.WatchkeepingLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("CourseLogged")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("course_logged");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<double?>("DistanceRun")
                        .HasColumnType("decimal(8,2)")
                        .HasColumnName("distance_run");

                    b.Property<string>("EngineStatus")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("engine_status");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("boolean")
                        .HasColumnName("is_synced");

                    b.Property<string>("Lookout")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("lookout");

                    b.Property<string>("MasterSignature")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("master_signature");

                    b.Property<string>("NotableEvents")
                        .HasColumnType("text")
                        .HasColumnName("notable_events");

                    b.Property<string>("OfficerOnWatch")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("officer_on_watch");

                    b.Property<double?>("PositionLat")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("position_lat");

                    b.Property<double?>("PositionLon")
                        .HasColumnType("decimal(10,7)")
                        .HasColumnName("position_lon");

                    b.Property<string>("SeaState")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("sea_state");

                    b.Property<double?>("SpeedLogged")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("speed_logged");

                    b.Property<string>("Visibility")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("visibility");

                    b.Property<DateTime>("WatchDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("watch_date");

                    b.Property<string>("WatchPeriod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("watch_period");

                    b.Property<string>("WatchType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("watch_type");

                    b.Property<string>("WeatherConditions")
                        .HasColumnType("text")
                        .HasColumnName("weather_conditions");

                    b.HasKey("Id")
                        .HasName("p_k_watchkeeping_logs");

                    b.HasIndex("IsSynced")
                        .HasDatabaseName("idx_watchkeeping_synced")
                        .HasFilter("is_synced = false");

                    b.HasIndex("OfficerOnWatch")
                        .HasDatabaseName("idx_watchkeeping_officer");

                    b.HasIndex("WatchDate")
                        .IsDescending()
                        .HasDatabaseName("idx_watchkeeping_date");

                    b.HasIndex("WatchType")
                        .HasDatabaseName("idx_watchkeeping_type");

                    b.HasIndex("WatchDate", "WatchPeriod")
                        .HasDatabaseName("idx_watchkeeping_date_period");

                    b.ToTable("watchkeeping_logs", "public");
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaintenanceTask", b =>
                {
                    b.HasOne("MaritimeEdge.Models.TaskType", null)
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaintenanceTaskDetail", b =>
                {
                    b.HasOne("MaritimeEdge.Models.MaintenanceTask", null)
                        .WithMany()
                        .HasForeignKey("MaintenanceTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaritimeEdge.Models.TaskDetail", null)
                        .WithMany()
                        .HasForeignKey("TaskDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaterialCategory", b =>
                {
                    b.HasOne("MaritimeEdge.Models.MaterialCategory", null)
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("MaritimeEdge.Models.MaterialItem", b =>
                {
                    b.HasOne("MaritimeEdge.Models.MaterialCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MaritimeEdge.Models.TaskDetail", b =>
                {
                    b.HasOne("MaritimeEdge.Models.TaskType", null)
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MaritimeEdge.Models.User", b =>
                {
                    b.HasOne("MaritimeEdge.Models.CrewMember", null)
                        .WithMany()
                        .HasForeignKey("CrewId")
                        .HasPrincipalKey("CrewId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MaritimeEdge.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
